// edit font rendering 
//tip: use for light text on dark backgrounds
@mixin fontSmooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}



@mixin font-size($fs-map) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

// reset user agent style
@mixin reset {
  background-color: transparent;
  padding: 0;
  border: 0;
  border-radius: 0;
  color: inherit;
  line-height: inherit;
  appearance: none;
}


@mixin flexCenter($direction) {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $direction;
}

@mixin theme($dark-theme:true) {
  @if $dark-theme {
    background: darken($primary-color, 100%);
    color: lighten($text-color, 100%);
  }
}

@mixin mq($key) {
  $size: map-get($breakpoints, $key);

  @media only screen and (max-width: $size){
    @content;
  }
}

@mixin pseudo(
  $loc: before, 
  $content:'', 
  $pos: absolute,
  $bottom: 0,
  $left:0,
  ) {
  position:relative;

  &::#{$loc} {
    content: $content;
    position: $pos;
    bottom: $bottom;
    left: $left;
    @content;
  }
}

@mixin hover-line() { 
  transition: color 0.2s ease-out;
  @include pseudo($loc: after) {
    width: 100%;
    height: 1px;
    bottom: -4px;
    left: 0;
    background-color:hsl(18,46,62) ;
    transform: scaleX(0);
    transform-origin: bottom left;
    transition: transform 0.5s ease-out;
  }

  &:hover,
  &:focus {
    color:hsl(18,46,62);
    &::after {
      transform: scaleX(1);
      transform-origin: bottom left;
    }
  }
}

@mixin hover-line-revers() { 
  transition: color 0.3s ease-out;
  @include pseudo($loc: before) {
    width: 100%;
    height: 1px;
    bottom: -3px;
    left: 0;
    background-color: currentColor ;
    transform: scaleX(1);
    transform-origin: bottom right;
    transition: transform 0.5s ease-out;
  }

  &:hover,
  &:focus {
    &::before {
      transform: scaleX(0);
      transform-origin: bottom right;
    }
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}