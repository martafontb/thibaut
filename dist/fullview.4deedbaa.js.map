{"version":3,"sources":["../node_modules/fullview/dist/fullview.js"],"names":[],"mappingsfile":"fullview.4deedbaa.js","sourceRoot":"../src","sourcesContent":["/**\n * fullView v1.1.2\n */\n\n/*!\r\n * https://github.com/seeratawan01/fullview.js\r\n *\r\n * @license GPLv3 for open source use only\r\n *\r\n * Copyright (C) 2020 https://github.com/seeratawan01/fullview.js/blob/master/LICENSE\r\n */\r\n; (function ($, window, document, undefined) {\r\n\r\n    var fullView = 'fullView';\r\n\r\n    // Create the plugin constructor\r\n    function FullView(views, options) {\r\n\r\n        this._defaults = $.fn.fullView.defaults;\r\n\r\n        this.options = $.extend({}, this._defaults, options);\r\n        this.mainView = $(views);\r\n        this.views = $(views).children();\r\n\r\n        this._name = fullView;\r\n\r\n        this.currentView = 0;\r\n        this.previousView = 0;\r\n        this.isScrolling = false;\r\n        this.isProgress = false;\r\n        this.offsets = [];\r\n        this.$dotsElement = null;\r\n        this.$navbar = null;\r\n        this.$anchors = {};\r\n        this.lastY = null;\r\n        this.lastX = null;\r\n\r\n        this.init();\r\n\r\n    }\r\n\r\n    // Avoid FullView.prototype conflicts\r\n    $.extend(FullView.prototype, {\r\n\r\n        // Initialization logic\r\n        init: function () {\r\n\r\n            this.buildCache();\r\n            this.utilites();\r\n            this.settingUp();\r\n            this.bindEvents();\r\n        },\r\n\r\n        // Remove plugin instance completely\r\n        destroy: function () {\r\n            this.unbindEvents();\r\n            this.$views.removeData();\r\n        },\r\n\r\n        // Cache DOM nodes for performance\r\n        buildCache: function () {\r\n\r\n            this.$window = $(window);\r\n            this.$document = $(document);\r\n            this.$htmlBody = $(\"html, body\");\r\n\r\n            this.$views = $(this.views);\r\n\r\n            if (this.options.navbar !== undefined && typeof this.options.navbar === 'string') {\r\n\r\n                if ($(this.options.navbar).length) {\r\n                    this.$navbar = $(this.options.navbar)\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        utilites: function () {\r\n            this.createDots = function createDots() {\r\n                var $dots = $(\"#fv-dots\");\r\n                if ($dots.length) {\r\n                    $dots.remove();\r\n                }\r\n                var div = $(\"<div>\").attr(\"id\", \"fv-dots\").append('<ul>');\r\n\r\n                if (this.options.dotsTooltips === true) {\r\n                    var plugin = this;\r\n                    this.$views.each(function (i) {\r\n                        var tooltipTitle = plugin.$views.eq(i).attr('data-tooltip') ? plugin.$views.eq(i).attr('data-tooltip') : null;\r\n                        if (tooltipTitle) {\r\n                            div.find('ul').append('<li class=\"fv-tooltip\"><a data-scroll=\"' + i + '\" href=\"#\" class=\"\"><span></span></a><span class=\"fv-tooltiptext\">' + tooltipTitle + '</span></li>')\r\n                        } else {\r\n                            div.find('ul').append('<li class=\"fv-tooltip\"><a data-scroll=\"' + i + '\" href=\"#\" class=\"\"><span></span></a></li>')\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.$views.each(function (i) {\r\n                        div.find('ul').append('<li><a data-scroll=\"' + i + '\" href=\"#\" class=\"\"><span></span></a></li>')\r\n                    });\r\n                }\r\n\r\n\r\n                if (this.options.dotsPosition !== 'right') {\r\n                    div.css({\r\n                        left: '4%'\r\n                    });\r\n\r\n                    div.find('.fv-tooltip .fv-tooltiptext').css({\r\n                        right: 'unset',\r\n                        left: '105%'\r\n                    })\r\n\r\n                    div.find('.fv-tooltip').addClass('fv-tooltip-left');\r\n\r\n                }\r\n\r\n\r\n                $('body').append(div);\r\n\r\n                return div.find('a');\r\n            };\r\n\r\n            this.changeActiveStatus = function changeActiveStatus($view) {\r\n                this.$views.removeClass('active').eq($view).addClass('active');\r\n                if (this.options.dots) {\r\n                    this.$dotsElement.removeClass('active').eq($view).addClass('active')\r\n                }\r\n                if (this.$anchors.length) {\r\n                    this.$anchors.removeClass('active').filter('[data-scroll=\"' + $view + '\"]').addClass('active')\r\n                }\r\n            }\r\n\r\n            this.scrollTo = function scrollTo($view, dir) {\r\n\r\n                var plugin = this;\r\n\r\n                $view = parseInt($view);\r\n\r\n                if (this.offsets[$view] !== undefined && typeof $view === 'number') {\r\n                    this.isProgress = true;\r\n                    this.previousView = this.currentView === $view ? this.previousView : this.currentView;\r\n                    this.currentView = $view;\r\n\r\n                    if (dir === undefined) {\r\n                        if (this.previousView > this.currentView) {\r\n                            dir = \"up\"\r\n                        } else if (this.previousView < this.currentView) {\r\n                            dir = \"down\"\r\n                        }\r\n                    }\r\n\r\n                    // Event OnScrollStart\r\n                    this.callback(\"onScrollStart\", {\r\n                        destination: $view,\r\n                        current: this.previousView,\r\n                        direction: dir\r\n                    });\r\n\r\n                    this.$htmlBody.stop(true).animate(\r\n                        {\r\n                            scrollTop: this.offsets[$view].offset\r\n                        }, {\r\n                        easing: $.easing[this.options.easing] ? this.options.easing : 'linear',\r\n                        duration: this.options.speed\r\n                    }).promise().then(function () {\r\n                        plugin.changeActiveStatus($view);\r\n                        if (plugin.isScrolling === true) {\r\n                            setTimeout(function () {\r\n                                plugin.isScrolling = false;\r\n                            }, plugin.options.speed + 320);\r\n                        }\r\n                        this.isProgress = false;\r\n                        // Event OnScrollEnd\r\n                        plugin.callback(\"onScrollEnd\", {\r\n                            direction: dir\r\n                        });\r\n                    });\r\n                } else {\r\n                    console.warn(\"The View You Want To Scroll To Does not Exist!\")\r\n                }\r\n\r\n            }\r\n\r\n            this.scrollByWheel = function scrollByWheel(event) {\r\n\r\n                // Check if Already scrolling\r\n                if (!$(':animated').length && !this.isScrolling) {\r\n                    this.isScrolling = true;\r\n                    if (event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0) {\r\n                        // scroll up\r\n                        this.scrollUp();\r\n                    }\r\n                    else {\r\n                        // scroll down\r\n                        this.scrollDown();\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.scrollDown = function scrollDown() {\r\n                var dir = \"down\";\r\n                if (this.currentView < this.$views.length - 1) {\r\n                    this.previousView = this.currentView;\r\n                    this.currentView++;\r\n                    this.scrollTo(this.currentView, dir);\r\n                }\r\n                else if (this.currentView === this.$views.length - 1) {\r\n                    this.isScrolling = false;\r\n                    if (this.options.backToTop) {\r\n                        this.isScrolling = true;\r\n                        this.previousView = this.currentView;\r\n                        this.currentView = 0;\r\n                        this.scrollTo(this.currentView, dir);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n\r\n            this.scrollUp = function scrollUp() {\r\n                var dir = \"up\";\r\n                if (this.currentView > 0) {\r\n                    this.previousView = this.currentView;\r\n                    this.currentView--;\r\n                    this.scrollTo(this.currentView, dir);\r\n                } else if (this.currentView === 0) {\r\n                    this.isScrolling = false;\r\n                }\r\n                return this;\r\n            }\r\n        },\r\n\r\n        settingUp: function () {\r\n            var vh = this.$window.height();\r\n            // var vw = this.$window.width();\r\n\r\n            // Setting Viewport\r\n            this.$views.css({\r\n                height: vh,\r\n                // width: vw\r\n            });\r\n            this.currentView = 0;\r\n            this.isScrolling = false;\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n\r\n            if (typeof this.options.speed !== 'number') {\r\n                this.options.speed = 500;\r\n                console.warn(\"Speed Should be of Type Number\")\r\n            } else {\r\n\r\n                if (this.options.speed <= 300) {\r\n                    this.options.speed = 300;\r\n                    console.warn(\"Min Speed is 350 miliseconds\")\r\n                }\r\n            }\r\n\r\n\r\n\r\n            // Calculating Offsets\r\n            this.offsets.splice(0, this.offsets.length)\r\n            this.$views.each(function (i) {\r\n                var anchor = this.$views.eq(i).attr('id');\r\n                var viewOffset = this.$views.eq(i).offset().top;\r\n\r\n                this.offsets.push({\r\n                    position: i,\r\n                    anchor: anchor,\r\n                    offset: viewOffset\r\n                })\r\n\r\n            }.bind(this));\r\n\r\n\r\n            // Setting Menu\r\n            if (this.$navbar !== null) {\r\n                var $menu = this.$navbar;\r\n                var seletedAnchor = this.offsets.filter(function (obj) {\r\n                    if (obj.anchor !== undefined) {\r\n                        var $menuitem = $menu.find('a[href=\"#' + obj.anchor + '\"]')\r\n                        if ($menuitem.length) {\r\n                            $menuitem.attr(\"data-scroll\", obj.position)\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false; // skip\r\n                }).map(function (obj) { return (\"#\" + obj.anchor); });\r\n\r\n                var queryString = \"a[href='\" + seletedAnchor.join(\"'], a[href='\") + \"']\";\r\n\r\n                // Collecting All Nav Items\r\n                this.$anchors = this.$navbar.find(queryString)\r\n\r\n            }\r\n\r\n            // Creating Dots\r\n            if (this.options.dots) {\r\n                this.$dotsElement = this.createDots();\r\n            }\r\n\r\n            // Check if any view active\r\n            var $actview = this.$views.filter('[class=\"active\"]');\r\n\r\n            // this.$views.removeClass('active');\r\n            if ($actview.length) {\r\n                var offset = $actview.eq(0).offset().top;\r\n\r\n                var activeData = this.offsets.filter(function (obj) {\r\n                    return obj.offset === offset;\r\n                })\r\n\r\n                this.currentView = activeData[0].position;\r\n                this.previousView = this.currentView;\r\n\r\n                document.body.scrollTop = offset;\r\n                document.documentElement.scrollTop = offset;\r\n            }\r\n\r\n            // If AutoPlay\r\n            if (this.options.dots) {\r\n                this.$dotsElement = this.createDots();\r\n            }\r\n\r\n            // Setting Initail Active Status\r\n            this.changeActiveStatus(this.currentView);\r\n\r\n        },\r\n\r\n        // Bind events that trigger methods\r\n        bindEvents: function () {\r\n            var plugin = this;\r\n\r\n            // On Window Resize\r\n            plugin.$window.on('resize' + '.' + plugin._name, plugin.settingUp.bind(plugin));\r\n\r\n            // On Dot Click\r\n            plugin.$dotsElement !== null ?\r\n                plugin.$dotsElement.on('click' + '.' + plugin._name, function (e) {\r\n                    e.preventDefault();\r\n                    if (!$(':animated').length) {\r\n                        plugin.previousView = plugin.currentView;\r\n                        plugin.currentView = parseInt($(this).attr(\"data-scroll\"));\r\n                        plugin.scrollTo(plugin.currentView);\r\n                    }\r\n                }) : \"\";\r\n\r\n            // On nav anchor click\r\n            plugin.$anchors !== undefined && plugin.$anchors.length > 0 ?\r\n                plugin.$anchors.on('click' + '.' + plugin._name, function (e) {\r\n                    e.preventDefault();\r\n\r\n                    if (!$(':animated').length) {\r\n                        plugin.previousView = plugin.currentView;\r\n                        plugin.currentView = parseInt($(this).attr(\"data-scroll\"));\r\n                        plugin.scrollTo(plugin.currentView);\r\n                    }\r\n\r\n                }) : \"\"\r\n\r\n            // On MouseScroll\r\n            plugin.options.mouseScrolling ?\r\n                plugin.$window.on('DOMMouseScroll mousewheel' + '.' + plugin._name, function (event) {\r\n                    var e = event || window.event,\r\n                        target = e.target || e.srcElement;\r\n\r\n                    if (target.tagName.toUpperCase() == 'INPUT') return;\r\n                    plugin.scrollByWheel(e);\r\n                }) : \"\"\r\n\r\n            // On Keyboard Press\r\n            plugin.options.keyboardScrolling ?\r\n                plugin.$document.on('keydown' + '.' + plugin._name, function (event) {\r\n\r\n                    var e = event || window.event,\r\n                        target = e.target || e.srcElement;\r\n\r\n                    if (target.tagName.toUpperCase() == 'INPUT') return;\r\n\r\n                    // Check if Already scrolling\r\n                    if (!$(':animated').length && !plugin.isScrolling) {\r\n                        var code = (e.keyCode ? e.keyCode : e.which);\r\n                        switch (code) {\r\n                            case 40: // Down key\r\n                                plugin.scrollDown();\r\n                                break;\r\n                            // case 32: // Space Bar\r\n                            //     plugin.scrollDown();\r\n                            //     break;\r\n                            case 38: // Up key\r\n                                plugin.scrollUp();\r\n                                break;\r\n                            case 33: // Page up key\r\n                                plugin.scrollUp();\r\n                                break;\r\n                            case 34: // Page down key\r\n                                plugin.scrollDown();\r\n                                break;\r\n                        }\r\n                    }\r\n                }) : \"\"\r\n\r\n            // On Touch Devices\r\n            plugin.$views.on('touchstart' + '.' + plugin._name, function (e) {\r\n                plugin.lastY = e.originalEvent.touches[0].clientY;\r\n                plugin.lastX = e.originalEvent.touches[0].clientX;\r\n            });\r\n\r\n            plugin.options.touchScrolling ?\r\n                plugin.$views.on('touchend' + '.' + plugin._name, function (event) {\r\n                    // if (e.target !== e.currentTarget) return;\r\n\r\n                    var e = event || window.event,\r\n                        target = e.target || e.srcElement;\r\n                    if (target.tagName.toUpperCase() == 'INPUT') return;\r\n\r\n                    var currentY = e.originalEvent.changedTouches[0].clientY;\r\n                    var currentX = e.originalEvent.changedTouches[0].clientX;\r\n\r\n                    if (currentX < plugin.lastX) {\r\n                        // Left\r\n                        // console.log(\"left\")\r\n                    } else if (currentX > plugin.lastX) {\r\n                        // Right\r\n                        // console.log(\"right\")\r\n                    }\r\n\r\n                    if (plugin.lastY > currentY + 25) {\r\n                        plugin.scrollDown();\r\n                    } else if (plugin.lastY < currentY - 25) {\r\n                        plugin.scrollUp();\r\n                    }\r\n                }) : \"\"\r\n\r\n        },\r\n\r\n        // Unbind events that trigger methods\r\n        unbindEvents: function () {\r\n            this.$window.off('.' + this._name);\r\n            this.$document.off('.' + this._name);\r\n            this.$views.off('.' + this._name);\r\n        },\r\n\r\n        callback: function (eventName, addtional) {\r\n            // Cache onScrollEnd option\r\n            var onScrollStart = this.options.onScrollStart;\r\n            var onScrollEnd = this.options.onScrollEnd;\r\n\r\n            if (typeof onScrollEnd === 'function' && eventName === \"onScrollEnd\") {\r\n                // Current, Previous, Direction\r\n                onScrollEnd(this.$views.eq(this.currentView), this.$views.eq(this.previousView), addtional.direction);\r\n            }\r\n\r\n            if (typeof onScrollStart === 'function' && eventName === \"onScrollStart\") {\r\n                // Current, Destination, Direction\r\n                onScrollStart(this.$views.eq(addtional.current), this.$views.eq(addtional.destination), addtional.direction);\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    $.fn.fullView = function (options) {\r\n\r\n        if (options === undefined || typeof options === 'object') {\r\n\r\n            return this.each(function () {\r\n\r\n                if (!$.data(this, fullView)) {\r\n                    $.data(this, fullView, new FullView(this, options));\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    $.fn.fullView.defaults = {\r\n        //Navigation\r\n        navbar: undefined,\r\n        dots: true,\r\n        dotsPosition: 'right',\r\n        dotsTooltips: false,\r\n\r\n        //Scrolling\r\n        easing: 'linear',\r\n        backToTop: false,\r\n        speed: 500, //ms\r\n\r\n        // Accessibility\r\n        keyboardScrolling: true,\r\n        mouseScrolling: true,\r\n        touchScrolling: true,\r\n\r\n        // Callback\r\n        onScrollEnd: null,\r\n        onScrollStart: null,\r\n\r\n    };\r\n\r\n})(jQuery, window, document);"]}